#! /usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) 2008-2009 Ulteo SAS
# http://www.ulteo.com
# Author Julien LANGLOIS <julien@ulteo.com>
# Author Laurent CLOUET <laurent@ulteo.com>
#
# This program is free software; you can redistribute it and/or 
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2
# of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import commands
import ConfigParser
import sys, os
from xml.dom import minidom
from xml.parsers.expat import ExpatError

class Application(dict):
    def fromXmlNode(self, doc):
        id = doc.getAttribute("id")
        self['Name'] = doc.getAttribute("name")
        self['Comment'] = doc.getAttribute("description")
        self['Icon'] = 'vapp-%s.png'%(id)
        self['MimeType'] = doc.getAttribute("mimetypes")

        execNode = doc.getElementsByTagName('executable')[0]

        self['Exec'] = execNode.getAttribute("command")
        if doc.getAttribute("type") == "windows":
            self['Exec'] = 'rdesktop --start-app "%s" %%W'%(self['Exec'])
            self['StartupNotify'] = 'true'

    def toDesktopFile(self, file_):
        lines = ['[Desktop Entry]', 'Version=1.0', 'Encoding=UTF-8', 'Type=Application']

        for k,v in self.items():
            lines.append(k+'='+v)

        lines = [e.encode('utf-8')+"\n" for e in lines]

        f = file(file_, 'wb')
        f.writelines(lines)
        f.close()


def usage():
    print>> sys.stderr, "Usage: %s file directory"%(sys.argv[0])
    print>> sys.stderr, "\tfile: a xml file that contain applications"

if len(sys.argv) < 3:
    print>> sys.stderr, "Bad argument number"
    print>> sys.stderr, ""
    usage()
    sys.exit(1)

xmlFile = sys.argv[1]
dest_file = sys.argv[2]

if not os.path.isfile(xmlFile):
    print>> sys.stderr, "No such file '%s'"%(xmlFile)
    print>> sys.stderr, ""
    usage()
    sys.exit(1)


if not os.path.isdir(os.path.dirname(dest_file)):
    print>> sys.stderr, "No such directory '%s'"%(os.path.dirname(dest_file))
    print>> sys.stderr, ""
    usage()
    sys.exit(1)


try:
    doc = minidom.parse(xmlFile)
except ExpatError,e:
    sys.exit(1)


for node in doc.getElementsByTagName('application'):
    a = Application()
    a.fromXmlNode(node)
    a.toDesktopFile(dest_file)

