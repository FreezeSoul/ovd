#! /usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2009 Ulteo SAS
# http://www.ulteo.com
# Author Gauvain POCENTEK <gauvain@ulteo.com>
# Author Julien LANGLOIS <julien@ulteo.com>
#
# This program is free software; you can redistribute it and/or 
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2
# of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import os
import struct
import sys
import time
import locale

from ovd_shells import OvdAppChannel
from ovd_shells.Platform import _platform as Platform
from ovd_shells.Platform.InstancesManager import InstancesManager
from ovd_shells.Platform.VirtualChannel import VirtualChannel
from ovd_shells import Util

def main():
	user_sdir = Platform.getUserSessionDir()
	if user_sdir is None or not os.path.isdir(user_sdir):
		sys.exit(1)
	
	# Load profile share
	Platform.mountShares()
	
	os.environ["OVD_SESSION_DIR"] = user_sdir
	Util.loadUserEnv(user_sdir)
	
	seamlessPid = Platform.launch("seamlessrdpshell", False)
	
	vchannel = VirtualChannel(OvdAppChannel.NAME)
	tryOpenChannel(vchannel)
	
	
	buf = struct.pack(">B", OvdAppChannel.ORDER_INIT)
	vchannel.Write(buf)
	
	im = InstancesManager(vchannel)
	im.start()
	
	while 1:
		# Read a complete packet
		# so we assume a maximum packet size is 512
		packet = vchannel.Read(512)
		if packet is None:
			print "error at read"
			time.sleep(0.5)
			continue
		
		if len(packet) < 1:
			print "Packet length error"
			continue
		
		order = struct.unpack('>B', packet[0])[0]
		if order == OvdAppChannel.ORDER_START:
			if len(packet) != 9:
				print "Packet length error"
				continue
			token = struct.unpack('<I', packet[1:5])[0]
			app_id = struct.unpack('<I', packet[5:9])[0]
			
			print "recv startapp order %d %d"%(token, app_id)
			im.pushJob((order, token, app_id))
		
		elif order == OvdAppChannel.ORDER_START_WITH_ARGS:
			if len(packet) < 9 + 4 + 4:
				print "Packet length error"
				continue
			token = struct.unpack('<I', packet[1:5])[0]
			app_id = struct.unpack('<I', packet[5:9])[0]
			
			ptr = 9
			l = struct.unpack('<I', packet[ptr:ptr+4])[0]
			if len(packet) < ptr + l + 4:
				print "Packet length error"
				continue
			ptr+= 4
			
			share = packet[ptr:ptr+l]
			try:
				share = share.decode("UTF-16LE")
				share = share.encode(locale.getpreferredencoding())
			except:
				print "Message ORDER_START_WITH_ARGS: share argument is not UTF-16-LE srting"
				continue
			ptr+= l
			
			l = struct.unpack('<I', packet[ptr:ptr+4])[0]
			if len(packet) != ptr + l:
				print "Packet length error"
				continue
			ptr+= 4
			
			path = packet[ptr:ptr+l]
			try:
				path = path.decode("UTF-16LE")
				path = path.encode(locale.getpreferredencoding())
			except:
				print "Message ORDER_START_WITH_ARGS: path argument is not UTF-16-LE srting"
				continue
			ptr+=l
			
			job = (OvdAppChannel.ORDER_START, token, app_id, share, path)
			print "recv startapp order %d %d %s %s"%(token, app_id, share, path)
			im.pushJob(job)
	
		elif order == OvdAppChannel.ORDER_STOP:
			if len(packet) < 5:
				print "Packet length error"
				continue
			token = struct.unpack('<I', packet[1:5])[0]
			
			print "recv stop order %d"%(token)
			im.pushJob((order, token))
		
		
		elif order == OvdAppChannel.ORDER_EXIT:
			# logoff
			break
		
		else:
			print "unknown message %X"%(order)
	
	im.stop()
	
	vchannel.Close()
	
	if seamlessPid is not None:
		print "Killing seamless process"
		Platform.kill(seamlessPid)
	
	
	sys.exit(0)


def tryOpenChannel(vchannel):
	
	for t in [0.5, 1, 2]:
		if vchannel.Open():
			return
		time.sleep(t)
		
	if vchannel.Open():
		return
	
	sys.exit(1)



if __name__ == "__main__":
	if True:
		import sys
		
		path = os.path.join(os.path.expanduser('~'), "ovd-dump.txt")
		buf = file(path, "a", 0)
		sys.stderr = buf
		sys.stdout = buf
		print "#################################################"
	main()
