#! /usr/bin/python

## Copyright (C) 2007-2008 Ulteo SAS
## http://www.ulteo.com
## Author Julien LANGLOIS <julien@ulteo.com>

## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation; version 2
## of the License

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import os
import glob
import sys

def main():
    if len(sys.argv) == 1:
        print "Usage %s [-p1] directory [directories ...]"%(sys.argv[0])
        sys.exit(1)

    flag = False
    args = sys.argv[1:]
    
    if args[0] == "-p1":
        flag = True
        args = args[1:]

        if len(args) == 0:
            print "Usage %s -p1 directory [directories ...]"%(sys.argv[0])
            sys.exit(1)

    for d in args:
        if not os.path.isdir(d):
            print "No such directory '%s'"%(d)
            continue
        doSectionFile(d, flag)


def doSectionFile(directory, flag):
    datas = getStructure(directory)
    buf = structure2section(datas, directory, flag)

    lines = []
    for l in buf:
        lines.append(l+'\n')

    f = file(directory+".nsh", "w")
    f.writelines(lines)
    f.close()

def getStructure(firstdir):
    dirs = [firstdir]
    sections = []

    for d in dirs:
        files = glob.glob(d+"/*")
        cursec = []
 
        for f in files:
            if os.path.isdir(f):
                dirs.append(f)
            else:
                cursec.append(f)
        sections.append((d, cursec))

    return sections

def removeprefix(base, prefix):
    if base.startswith(prefix):
        base = base[len(prefix):]

    if base.startswith("/"):
        base = base[1:]

    return base

##     if len(base) < len(prefix):
##         return base
##     i = 0
##     while i<len(prefix):
##         if prefix[i] != base[i]:
##             return base[i:]
##         i+=1
##     return base[i:]

def structure2section(datas, directory, flag = False):
    lines = []

    for (name,l) in datas:
        if not flag:
            d = name.replace("/", "\\")
        else:
            d = removeprefix(name, directory)
            print "remove prefix return : ",d
            d = d.replace("/", "\\")
        
        lines.append('Section "Sec%s" Sec%s'%(name, name))
        lines.append('  SetOutPath "$INSTDIR\\%s"'%(d))
        lines.append('  SetOverwrite ifnewer')
        lines.append("")
        
        for f in l:
            lines.append('  File "%s"'%(f.replace("/", "\\")))
        lines.append("SectionEnd")
        lines.append("")
        
    datas.reverse()
    for (name,l) in datas:
        if not flag:
            d = name.replace("/", "\\")
        else:
            d = removeprefix(name, directory)
            d = d.replace("/", "\\")

        lines.append('Section "un.Sec%s" SecUn%s'%(name, name))
        for f in l:
            ff = removeprefix(f, directory)
            ff = ff.replace("/", "\\")
            lines.append('  Delete "$INSTDIR\\%s"'%(ff))
        lines.append("")
        lines.append('  RMDir "$INSTDIR\\%s"'%(d))
        lines.append("SectionEnd")
        lines.append("")

    return lines



if __name__ == "__main__":
    main()
