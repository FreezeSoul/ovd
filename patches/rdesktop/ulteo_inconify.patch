=== modified file 'rdesktop.c'
--- rdesktop.c	2009-09-22 09:48:49 +0000
+++ rdesktop.c	2009-09-24 07:42:04 +0000
@@ -49,6 +49,10 @@
 
 #include "ssl.h"
 
+enum icon{
+	NONE = 0, ICONIFY, UNICONIFY
+};
+
 char g_title[64] = "";
 char g_username[64];
 char g_hostname[16];
@@ -94,6 +98,7 @@
 RD_BOOL g_ownbackstore = True;	/* We can't rely on external BackingStore */
 RD_BOOL g_seamless_rdp = False;
 enum main_frame g_main_frame = MAIN_FRAME_NORMAL;
+enum icon g_icon = NONE;
 
 /* Master socket identifier */
 char *master_socket = NULL;
@@ -440,9 +445,12 @@
 	RD_BOOL geometry_option = False;
 	int run_count = 0;	/* Session Directory support */
 	RD_BOOL continue_connect = True;	/* Session Directory support */
+	char *arg = NULL;
 	static const struct option long_options[]=
 	{
 		{"main-frame", 1, NULL, 10},
+		{"iconify-display", 1, NULL, 11},
+		{"uniconify-display", 1, NULL, 12},
 		{NULL, 0, NULL, 0} /* End of array need by getopt_long do not delete it*/
 	};
 #ifdef WITH_RDPSND
@@ -501,6 +509,16 @@
 					usage(argv[0]);
 				break;
 
+			case 11: //--iconify-display
+				g_icon = ICONIFY;
+				arg = optarg;
+				break;
+
+			case 12: //--uniconify-display
+				g_icon = UNICONIFY;
+				arg = optarg;
+				break;
+
 			case 'A':
 				g_seamless_rdp = True;
 				break;
@@ -895,6 +913,26 @@
         return 0;
 	}
 
+	if (g_icon != NONE)
+	{
+		char buf[1025-6]; /* max message size for rdp - "SPAWN " */
+
+		switch(g_icon)
+		{
+			case ICONIFY:
+				snprintf (buf, strlen(arg)+strlen("ICON ON ")+1, "%s%s", "ICON ON ", arg);
+				break;
+			case UNICONIFY:
+				snprintf (buf, strlen(arg)+strlen("ICON OFF ")+1, "%s%s", "ICON OFF ", arg);
+				break;
+			default:
+				break;
+		}
+
+		seamless_socket_send(master_socket, buf);
+		return 0;
+	}
+
 	if (argc - optind != 1)
 	{
 		usage(argv[0]);

=== modified file 'seamless.c'
--- seamless.c	2009-09-22 14:29:02 +0000
+++ seamless.c	2009-09-23 15:41:17 +0000
@@ -609,6 +609,7 @@
 	char buffer[1024];
 	char *hh;
 	char *mm;
+	char *icon;
 	xdisplay *dis = NULL;
 
 	FD_ZERO(&rfds);
@@ -656,30 +657,51 @@
 		free(hh);
 		return 0;
 	}
-	snprintf(cmdline, 256, mm);
-
-	mm = strtok( NULL, "\n");
-	if (mm != NULL) {
-		displayName = strdup(mm);
-		if(!displayName)
-		{
-			error("strdup failed!\n");
-			return 1;
-		}
-	}
-	free(hh);
-	DEBUG(("cmdline: %s\ndisplay: %s\n", cmdline, displayName));
-
-	if(strcmp(getenv("DISPLAY"), displayName) != 0)
-	{
-		dis = xdisplay_register(displayName);
-		if(!dis)
-			return 1;
-	}
-		
-	/* Send spawn command to server-side SeamlessRDP component */
-	seamless_send_start_app(cmdline, dis);
-
+
+	if(str_startswith(mm, "ICON"))
+	{
+		mm = strtok(mm, " ");
+		icon = strtok(NULL, " ");
+		displayName = strtok(NULL, " ");
+		if(strcmp(icon, "ON") == 0)
+		{
+			if(xdisplay_all_windows_iconify(displayName))
+				return 0;
+		}
+		else if(strcmp(icon, "OFF") == 0)
+		{
+			if(xdisplay_all_windows_uniconify(displayName))
+				return 0;
+		}
+		error("Bad command in socket file\n");
+		return 1;
+	}
+	else
+	{
+		snprintf(cmdline, 256, mm);
+
+		mm = strtok( NULL, "\n");
+		if (mm != NULL) {
+			displayName = strdup(mm);
+			if(!displayName)
+			{
+				error("strdup failed!\n");
+				return 1;
+			}
+		}
+		free(hh);
+		DEBUG(("cmdline: %s\ndisplay: %s\n", cmdline, displayName));
+
+		if(strcmp(getenv("DISPLAY"), displayName) != 0)
+		{
+			dis = xdisplay_register(displayName);
+			if(!dis)
+				return 1;
+		}
+
+		/* Send spawn command to server-side SeamlessRDP component */
+		seamless_send_start_app(cmdline, dis);
+	}
 	return 0;
 }
 
@@ -759,7 +781,8 @@
 	/* Send command */
 	send(s, cmdline, strlen(cmdline), 0);
 	send(s, "\n", 1, 0);
-	send(s, display, strlen(display), 0);
+	if(!str_startswith(cmdline, "ICON"))
+		send(s, display, strlen(display), 0);
 
 	/* Close socket */
 	close(s);

=== modified file 'xdisplay.c'
--- xdisplay.c	2009-09-23 15:39:34 +0000
+++ xdisplay.c	2009-09-24 07:54:22 +0000
@@ -868,6 +868,56 @@
 	xdisplay_window_redraw(dis, sw);
 }
 
+RD_BOOL
+xdisplay_all_windows_iconify(char *disName)
+{
+	xdisplay *dis;
+	xwindow *sw;
+
+	for(dis = xdisplay_g_first; dis != NULL; dis = dis->next)
+	{
+		if(strcmp(disName, dis->name) == 0)
+		{
+			for(sw = xdisplay_sw_first; sw != NULL; sw = sw->next)
+			{
+				if(sw->sa->dis == dis)
+				{
+					XIconifyWindow(dis->display, sw->wnd, DefaultScreen(dis->display));
+					sw->state = xdisplay_ewmh_get_window_state(dis, sw->wnd);
+					seamless_send_state(sw->id, sw->state, 0);
+				}
+			}
+			return True;
+		}
+	}
+	return False;
+}
+
+RD_BOOL
+xdisplay_all_windows_uniconify(char *disName)
+{
+	xdisplay *dis;
+	xwindow *sw;
+
+	for(dis = xdisplay_g_first; dis != NULL; dis = dis->next)
+	{
+		if(strcmp(disName, dis->name) == 0)
+		{
+			for(sw = xdisplay_sw_first; sw != NULL; sw = sw->next)
+			{
+				if(sw->sa->dis == dis)
+				{
+					XMapWindow(dis->display, sw->wnd);
+					sw->state = xdisplay_ewmh_get_window_state(dis, sw->wnd);
+					seamless_send_state(sw->id, sw->state, 0);
+				}
+			}
+			return True;
+		}
+	}
+	return False;
+}
+
 void
 xdisplay_window_seticon(xdisplay *dis, xwindow *sw, const char *format, int width, int height, int chunk,
 		    const char *data, int chunk_len)

=== modified file 'xdisplay.h'
--- xdisplay.h	2009-09-22 14:29:02 +0000
+++ xdisplay.h	2009-09-23 15:41:17 +0000
@@ -122,6 +122,8 @@
 void xdisplay_window_destroy(xdisplay *dis, xwindow *sw);
 void xdisplay_windows_destroy_all();
 void xdisplay_all_windows_redraw();
+RD_BOOL xdisplay_all_windows_iconify(char *disName);
+RD_BOOL xdisplay_all_windows_uniconify(char *disName);
 
 void xdisplay_ewmh_del_icon(xdisplay *dis, Window wnd, int width, int height);
 

